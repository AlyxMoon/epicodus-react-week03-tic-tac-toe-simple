{"version":3,"sources":["lib/getWinnerOfBoard.ts","store/modules/game.ts","store/index.ts","store/configureStore.ts","components/GameBoard.tsx","App.tsx","index.tsx"],"names":["getIndexFromRowCol","row","col","getWinnerOfBoard","board","countX","countO","cell","countX2","countO2","playerMarkMap","1","2","togglePlayerMap","unloadedState","activePlayer","winner","actionCreators","resetGame","dispatch","getState","type","markCell","cellIndex","currentState","game","player","reducer","state","incomingAction","action","map","index","gameModule","reducers","configureStore","initialState","middleware","thunk","rootReducer","combineReducers","enhancers","windowIfDefined","window","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","connector","connect","generateCellClasses","className","i","onClick","restartGame","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7765c17.chunk.js","sourcesContent":["import { Board, PossibleCells } from '../store/modules/game'\n\nconst getIndexFromRowCol = (row: number, col: number): number => {\n  return (row * 3) + col\n}\n\nconst getWinnerOfBoard = (board: Board): PossibleCells => {\n  for (let col = 0; col < 3; col++) {\n    let countX = 0\n    let countO = 0\n\n    for (let row = 0; row < 3; row++) {\n      const cell = board[getIndexFromRowCol(row, col)]\n      if (cell === 'X') countX++\n      if (cell === 'O') countO++\n    }\n  \n    if (countX === 3) return 'X'\n    if (countO === 3) return 'O'\n  }\n\n  for (let row = 0; row < 3; row++) {\n    let countX = 0\n    let countO = 0\n\n    for (let col = 0; col < 3; col++) {\n      const cell = board[getIndexFromRowCol(row, col)]\n      if (cell === 'X') countX++\n      if (cell === 'O') countO++\n    }\n  \n    if (countX === 3) return 'X'\n    if (countO === 3) return 'O'\n  }\n\n  let countX = 0\n  let countO = 0\n  for (let col = 0, row = 0; col < 3 && row < 3; col++, row++) {\n    const cell = board[getIndexFromRowCol(row, col)]\n    if (cell === 'X') countX++\n    if (cell === 'O') countO++\n  }\n\n  if (countX === 3) return 'X'\n  if (countO === 3) return 'O'\n\n  let countX2 = 0\n  let countO2 = 0\n  for (let col = 2, row = 0; col >= 0 && row < 3; col--, row++) {\n    const cell = board[getIndexFromRowCol(row, col)]\n    if (cell === 'X') countX2++\n    if (cell === 'O') countO2++\n  }\n  \n  if (countX2 === 3) return 'X'\n  if (countO2 === 3) return 'O'\n\n  return ''\n}\n\n\nexport default getWinnerOfBoard\n","import { Action, Reducer } from 'redux'\nimport { AppThunkAction } from '../'\nimport getWinnerOfBoard from '../../lib/getWinnerOfBoard'\n\nconst playerMarkMap: {\n  [key: number]: 'X' | 'O'\n} = {\n  1: 'X',\n  2: 'O',\n}\n\nconst togglePlayerMap: {\n  [key: number]: 1 | 2,\n} = {\n  1: 2,\n  2: 1,\n}\n\nexport type PossibleCells = '' | 'X' | 'O'\nexport type Board = PossibleCells[]\n\nexport interface State {\n  board: Board,\n  activePlayer: 1 | 2,\n  winner: 0 | 1 | 2,\n}\n\nconst unloadedState: State = {\n  board: ['', '', '', '', '', '', '', '', ''],\n  activePlayer: 1,\n  winner: 0,\n}\n\ninterface ActionResetGame {\n  type: 'RESET_GAME',\n}\n\ninterface ActionMarkCell {\n  type: 'MARK_CELL',\n  cellIndex: number,\n}\n\ninterface ActionSetPlayer {\n  type: 'SET_PLAYER',\n  player: 1 | 2,\n}\n\ninterface ActionSetWinner {\n  type: 'SET_WINNER',\n  player: 1 | 2,\n}\n\ntype KnownActions = ActionResetGame | ActionMarkCell | ActionSetPlayer | ActionSetWinner\n\nexport const actionCreators = {\n  resetGame: (): AppThunkAction<KnownActions> => (dispatch, getState): void => {\n    dispatch({ type: 'RESET_GAME' })\n  },\n\n  markCell: (cellIndex: number): AppThunkAction<KnownActions> => (dispatch, getState): void => {\n    const currentState = getState().game\n    if (currentState.board[cellIndex] !== '') return\n    if (currentState.winner) return\n\n    dispatch({ type: 'MARK_CELL', cellIndex })\n\n    const winner = getWinnerOfBoard(getState().game.board)\n\n    if (winner === '') {\n      dispatch({\n        type: 'SET_PLAYER',\n        player: togglePlayerMap[getState().game.activePlayer]\n      })\n    }\n\n    if (winner === 'X') {\n      dispatch({\n        type: 'SET_WINNER',\n        player: 1,\n      })\n    }\n\n    if (winner === 'O') {\n      dispatch({\n        type: 'SET_WINNER',\n        player: 2,\n      })\n    }\n  },\n}\n\nexport const reducer: Reducer<State> = (\n  state: State | undefined,\n  incomingAction: Action,\n): State => {\n  if (!state) return unloadedState\n  const action = incomingAction as KnownActions\n\n  switch (action.type) {\n    case 'RESET_GAME':\n      return unloadedState\n    case 'MARK_CELL':\n      return {\n        ...state,\n        board: state.board.map((cell, index) => {\n          if (index !== action.cellIndex) return cell\n          return playerMarkMap[state.activePlayer]\n        })\n      }\n    case 'SET_PLAYER':\n      return {\n        ...state,\n        activePlayer: action.player,\n      }\n    case 'SET_WINNER':\n      return {\n        ...state,\n        winner: action.player,\n      }\n  }\n\n  return state\n}\n","import * as game from './modules/game'\n\nexport const gameModule = game\n\nexport interface ApplicationState {\n  game: game.State,\n}\n\nexport interface AppThunkAction<TAction> {\n  (\n    dispatch: (action: TAction) => void,\n    getState: () => ApplicationState\n  ): void,\n}\n\nexport const reducers = {\n  game: game.reducer,\n}\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { ApplicationState, reducers } from './'\n\nconst configureStore = (initialState?: ApplicationState) => {\n  const middleware = [\n    thunk\n  ]\n\n  const rootReducer = combineReducers({\n    ...reducers,\n  })\n\n  const enhancers = []\n  const windowIfDefined = typeof window === 'undefined' ? null : window as any\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__())\n  }\n\n  return createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(...middleware),\n      ...enhancers,\n    ),\n  )\n}\n\nexport default configureStore\n","import { FunctionComponent } from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { ApplicationState, gameModule } from '../store/index'\n\nimport './GameBoard.scss'\n\nconst GameBoard: FunctionComponent<PropsFromRedux> = ({ board, markCell }) => {\n  const generateCellClasses = (cell: string): string => {\n    return `cell ${cell === '' ? 'can-click' : ''}`\n  }\n\n  return (\n    <div className='game-board'>\n      {board.map((cell, i) => (\n        <div \n          className={generateCellClasses(cell)}\n          key={i}\n          onClick={() => markCell(i)}\n        >{cell}</div>\n      ))}\n    </div>\n  )\n}\n\nconst connector = connect(\n  (state: ApplicationState) => ({\n    board: state.game.board,\n    player: state.game.activePlayer,\n  }),\n  gameModule.actionCreators,\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(GameBoard)\n","import { FunctionComponent } from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { ApplicationState, gameModule } from './store/index'\n\nimport GameBoard from './components/GameBoard'\n\nconst App: FunctionComponent<PropsFromRedux> = ({ activePlayer, winner, restartGame }) => {\n  const getActivePlayerLetter = () => {\n    return activePlayer === 1 ? 'X' : 'O'\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Hello World</h1>\n\n      <dl>\n        <dt>Current Player:</dt>\n        <dd>{activePlayer} ({getActivePlayerLetter()})</dd>\n      </dl>\n\n      {!winner ? '' : (\n        <div className=\"winner-indicator\">\n          <h1>Player {winner} has won!</h1>\n          \n          <button onClick={restartGame}>Restart Game</button>\n        </div>\n      )}\n\n      <GameBoard />\n    </div>\n  )\n}\n\nconst connector = connect(\n  (state: ApplicationState) => ({\n    activePlayer: state.game.activePlayer,\n    winner: state.game.winner,\n  }),\n  {\n    restartGame: gameModule.actionCreators.resetGame,\n  }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport './styles/main.scss'\n\nimport configureStore from './store/configureStore'\nimport App from './App'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}